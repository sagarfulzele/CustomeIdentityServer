//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PsiMprODataApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MprDataEntities : DbContext
    {
        public MprDataEntities()
            : base("name=MprDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<mdAllComponentsFromScheme> mdAllComponentsFromSchemes { get; set; }
        public virtual DbSet<mdAllTerminalBlocksFromScheme> mdAllTerminalBlocksFromSchemes { get; set; }
        public virtual DbSet<mdAnnunciator> mdAnnunciators { get; set; }
        public virtual DbSet<mdArrangementAcLoopRow> mdArrangementAcLoopRows { get; set; }
        public virtual DbSet<mdArrangementAnnunciationRow> mdArrangementAnnunciationRows { get; set; }
        public virtual DbSet<mdArrangementPanelRow> mdArrangementPanelRows { get; set; }
        public virtual DbSet<mdArrangementsIndicationRow> mdArrangementsIndicationRows { get; set; }
        public virtual DbSet<mdArrangementSynchCircuitRow> mdArrangementSynchCircuitRows { get; set; }
        public virtual DbSet<mdAuxiliaryComponent> mdAuxiliaryComponents { get; set; }
        public virtual DbSet<mdAuxiliaryRelay> mdAuxiliaryRelays { get; set; }
        public virtual DbSet<mdBay> mdBays { get; set; }
        public virtual DbSet<mdBPanel> mdBPanels { get; set; }
        public virtual DbSet<mdCircuitBreaker> mdCircuitBreakers { get; set; }
        public virtual DbSet<mdConsumableItem> mdConsumableItems { get; set; }
        public virtual DbSet<mdContactDetail> mdContactDetails { get; set; }
        public virtual DbSet<mdContractPrimaryDeliverable> mdContractPrimaryDeliverables { get; set; }
        public virtual DbSet<mdContractSecondaryDeliverable> mdContractSecondaryDeliverables { get; set; }
        public virtual DbSet<mdCore> mdCores { get; set; }
        public virtual DbSet<mdCurrentTransformer> mdCurrentTransformers { get; set; }
        public virtual DbSet<mdCustomerDeliverableDate> mdCustomerDeliverableDates { get; set; }
        public virtual DbSet<mdCustomerDeliverableVoltage> mdCustomerDeliverableVoltages { get; set; }
        public virtual DbSet<mdDoubleLogo> mdDoubleLogoes { get; set; }
        public virtual DbSet<mdEarthSwitch> mdEarthSwitches { get; set; }
        public virtual DbSet<mdExternalStakeHolder> mdExternalStakeHolders { get; set; }
        public virtual DbSet<mdFileTime> mdFileTimes { get; set; }
        public virtual DbSet<mdInternalStakeHolder> mdInternalStakeHolders { get; set; }
        public virtual DbSet<mdIsolator> mdIsolators { get; set; }
        public virtual DbSet<mdLogoDetail> mdLogoDetails { get; set; }
        public virtual DbSet<mdMainRelay> mdMainRelays { get; set; }
        public virtual DbSet<mdMasterProjectSchedule> mdMasterProjectSchedules { get; set; }
        public virtual DbSet<mdMeter> mdMeters { get; set; }
        public virtual DbSet<mdPanelComponent> mdPanelComponents { get; set; }
        public virtual DbSet<mdPanelFunction> mdPanelFunctions { get; set; }
        public virtual DbSet<mdPanelFunctionsSub> mdPanelFunctionsSubs { get; set; }
        public virtual DbSet<mdPanel> mdPanels { get; set; }
        public virtual DbSet<mdPanelSize> mdPanelSizes { get; set; }
        public virtual DbSet<mdPanelSizesSub> mdPanelSizesSubs { get; set; }
        public virtual DbSet<mdPanelsSub> mdPanelsSubs { get; set; }
        public virtual DbSet<mdPowerTransformer> mdPowerTransformers { get; set; }
        public virtual DbSet<mdPRData> mdPRDatas { get; set; }
        public virtual DbSet<mdPrimaryEquipment> mdPrimaryEquipments { get; set; }
        public virtual DbSet<mdProjectLogo> mdProjectLogoes { get; set; }
        public virtual DbSet<mdProject> mdProjects { get; set; }
        public virtual DbSet<mdProjectStakeHolder> mdProjectStakeHolders { get; set; }
        public virtual DbSet<mdRemoteEndDetail> mdRemoteEndDetails { get; set; }
        public virtual DbSet<mdRevisionHistory> mdRevisionHistories { get; set; }
        public virtual DbSet<mdSchematicProjectPath> mdSchematicProjectPaths { get; set; }
        public virtual DbSet<mdSchematicProject> mdSchematicProjects { get; set; }
        public virtual DbSet<mdSingleLogo> mdSingleLogoes { get; set; }
        public virtual DbSet<mdSPanel> mdSPanels { get; set; }
        public virtual DbSet<mdSubstation> mdSubstations { get; set; }
        public virtual DbSet<mdTerminalBlock> mdTerminalBlocks { get; set; }
        public virtual DbSet<mdTestBlock> mdTestBlocks { get; set; }
        public virtual DbSet<mdTransducerChannelSpec> mdTransducerChannelSpecs { get; set; }
        public virtual DbSet<mdTransducer> mdTransducers { get; set; }
        public virtual DbSet<mdVoltageLevel> mdVoltageLevels { get; set; }
        public virtual DbSet<mdVoltageTransformer> mdVoltageTransformers { get; set; }
        public virtual DbSet<mdVPanel> mdVPanels { get; set; }
        public virtual DbSet<mdWinding> mdWindings { get; set; }
        public virtual DbSet<msBayRelayFunction> msBayRelayFunctions { get; set; }
        public virtual DbSet<msBayType> msBayTypes { get; set; }
        public virtual DbSet<msBusConfiguration> msBusConfigurations { get; set; }
        public virtual DbSet<msCommunicationType> msCommunicationTypes { get; set; }
        public virtual DbSet<msCompany> msCompanies { get; set; }
        public virtual DbSet<msComponentCategory> msComponentCategories { get; set; }
        public virtual DbSet<msConsumable> msConsumables { get; set; }
        public virtual DbSet<msContactDetail> msContactDetails { get; set; }
        public virtual DbSet<msControlFunction> msControlFunctions { get; set; }
        public virtual DbSet<msCtCoreFunction> msCtCoreFunctions { get; set; }
        public virtual DbSet<msCustomerDeliverable> msCustomerDeliverables { get; set; }
        public virtual DbSet<msDrawingFunction> msDrawingFunctions { get; set; }
        public virtual DbSet<msDrawing> msDrawings { get; set; }
        public virtual DbSet<msDrawingType> msDrawingTypes { get; set; }
        public virtual DbSet<msGenSchemeComponent> msGenSchemeComponents { get; set; }
        public virtual DbSet<msInitial> msInitials { get; set; }
        public virtual DbSet<msInsulationType> msInsulationTypes { get; set; }
        public virtual DbSet<msLocationDesignation> msLocationDesignations { get; set; }
        public virtual DbSet<msLogoType> msLogoTypes { get; set; }
        public virtual DbSet<msMimic> msMimics { get; set; }
        public virtual DbSet<msMPRSetting> msMPRSettings { get; set; }
        public virtual DbSet<msPanelArgType> msPanelArgTypes { get; set; }
        public virtual DbSet<msPanel> msPanels { get; set; }
        public virtual DbSet<msPanelType> msPanelTypes { get; set; }
        public virtual DbSet<msPrimaryEquipmentDrawing> msPrimaryEquipmentDrawings { get; set; }
        public virtual DbSet<msPrimaryEquipment> msPrimaryEquipments { get; set; }
        public virtual DbSet<msProtectionFunction> msProtectionFunctions { get; set; }
        public virtual DbSet<msPsiAtt> msPsiAtts { get; set; }
        public virtual DbSet<msPsiAttWireNo> msPsiAttWireNoes { get; set; }
        public virtual DbSet<msRelayFunction> msRelayFunctions { get; set; }
        public virtual DbSet<msRequiredQuantity> msRequiredQuantities { get; set; }
        public virtual DbSet<msScheduleHItem> msScheduleHItems { get; set; }
        public virtual DbSet<msStakeHolderContact> msStakeHolderContacts { get; set; }
        public virtual DbSet<msSubstationObjectType> msSubstationObjectTypes { get; set; }
        public virtual DbSet<msSubstationStructure> msSubstationStructures { get; set; }
        public virtual DbSet<msSubstationType> msSubstationTypes { get; set; }
        public virtual DbSet<msTNBApprovedEquipment> msTNBApprovedEquipments { get; set; }
        public virtual DbSet<msVoltageLevel> msVoltageLevels { get; set; }
        public virtual DbSet<msVtWindingFunciton> msVtWindingFuncitons { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_EmailNotificationDateOfReceived_Result> sp_EmailNotificationDateOfReceived(Nullable<bool> notApplicable, Nullable<System.DateTime> expectedDate)
        {
            var notApplicableParameter = notApplicable.HasValue ?
                new ObjectParameter("NotApplicable", notApplicable) :
                new ObjectParameter("NotApplicable", typeof(bool));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmailNotificationDateOfReceived_Result>("sp_EmailNotificationDateOfReceived", notApplicableParameter, expectedDateParameter);
        }
    
        public virtual ObjectResult<sp_EmailNotificationDesignStart_Result> sp_EmailNotificationDesignStart(Nullable<bool> notApplicable, Nullable<System.DateTime> designStart)
        {
            var notApplicableParameter = notApplicable.HasValue ?
                new ObjectParameter("NotApplicable", notApplicable) :
                new ObjectParameter("NotApplicable", typeof(bool));
    
            var designStartParameter = designStart.HasValue ?
                new ObjectParameter("DesignStart", designStart) :
                new ObjectParameter("DesignStart", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmailNotificationDesignStart_Result>("sp_EmailNotificationDesignStart", notApplicableParameter, designStartParameter);
        }
    
        public virtual ObjectResult<sp_EmailNotificationFirstTime_Result> sp_EmailNotificationFirstTime(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmailNotificationFirstTime_Result>("sp_EmailNotificationFirstTime", projectIDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_msBayRelayFunctions_Result> sp_msBayRelayFunctions(string action, Nullable<int> bayID, string relayFunction, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bayIDParameter = bayID.HasValue ?
                new ObjectParameter("BayID", bayID) :
                new ObjectParameter("BayID", typeof(int));
    
            var relayFunctionParameter = relayFunction != null ?
                new ObjectParameter("RelayFunction", relayFunction) :
                new ObjectParameter("RelayFunction", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msBayRelayFunctions_Result>("sp_msBayRelayFunctions", actionParameter, bayIDParameter, relayFunctionParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_msBayTypes_Result> sp_msBayTypes(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msBayTypes_Result>("sp_msBayTypes", actionParameter);
        }
    
        public virtual ObjectResult<sp_msConsumables_Result> sp_msConsumables(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msConsumables_Result>("sp_msConsumables", actionParameter);
        }
    
        public virtual ObjectResult<sp_msDrawings_Result> sp_msDrawings(string action, Nullable<int> sortingNo, string drawingPath, Nullable<int> panelID, string description, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var sortingNoParameter = sortingNo.HasValue ?
                new ObjectParameter("SortingNo", sortingNo) :
                new ObjectParameter("SortingNo", typeof(int));
    
            var drawingPathParameter = drawingPath != null ?
                new ObjectParameter("DrawingPath", drawingPath) :
                new ObjectParameter("DrawingPath", typeof(string));
    
            var panelIDParameter = panelID.HasValue ?
                new ObjectParameter("PanelID", panelID) :
                new ObjectParameter("PanelID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msDrawings_Result>("sp_msDrawings", actionParameter, sortingNoParameter, drawingPathParameter, panelIDParameter, descriptionParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_msMimics_Result> sp_msMimics(string action, Nullable<int> bayID, string mimics, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bayIDParameter = bayID.HasValue ?
                new ObjectParameter("BayID", bayID) :
                new ObjectParameter("BayID", typeof(int));
    
            var mimicsParameter = mimics != null ?
                new ObjectParameter("Mimics", mimics) :
                new ObjectParameter("Mimics", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msMimics_Result>("sp_msMimics", actionParameter, bayIDParameter, mimicsParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_msPanelTypes_Result> sp_msPanelTypes(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msPanelTypes_Result>("sp_msPanelTypes", actionParameter);
        }
    
        public virtual ObjectResult<sp_msPrimaryEquipmentDrawings_Result> sp_msPrimaryEquipmentDrawings(string action, Nullable<int> primaryEquimentsID, Nullable<bool> equipmementIncluded, string primaryDrawings, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var primaryEquimentsIDParameter = primaryEquimentsID.HasValue ?
                new ObjectParameter("PrimaryEquimentsID", primaryEquimentsID) :
                new ObjectParameter("PrimaryEquimentsID", typeof(int));
    
            var equipmementIncludedParameter = equipmementIncluded.HasValue ?
                new ObjectParameter("EquipmementIncluded", equipmementIncluded) :
                new ObjectParameter("EquipmementIncluded", typeof(bool));
    
            var primaryDrawingsParameter = primaryDrawings != null ?
                new ObjectParameter("PrimaryDrawings", primaryDrawings) :
                new ObjectParameter("PrimaryDrawings", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msPrimaryEquipmentDrawings_Result>("sp_msPrimaryEquipmentDrawings", actionParameter, primaryEquimentsIDParameter, equipmementIncludedParameter, primaryDrawingsParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_msPrimaryEquipments_Result> sp_msPrimaryEquipments(string action, string primaryEquipment, string description, string psiStandardID, Nullable<bool> isOptional, Nullable<int> bayID, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var primaryEquipmentParameter = primaryEquipment != null ?
                new ObjectParameter("PrimaryEquipment", primaryEquipment) :
                new ObjectParameter("PrimaryEquipment", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var psiStandardIDParameter = psiStandardID != null ?
                new ObjectParameter("PsiStandardID", psiStandardID) :
                new ObjectParameter("PsiStandardID", typeof(string));
    
            var isOptionalParameter = isOptional.HasValue ?
                new ObjectParameter("IsOptional", isOptional) :
                new ObjectParameter("IsOptional", typeof(bool));
    
            var bayIDParameter = bayID.HasValue ?
                new ObjectParameter("BayID", bayID) :
                new ObjectParameter("BayID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msPrimaryEquipments_Result>("sp_msPrimaryEquipments", actionParameter, primaryEquipmentParameter, descriptionParameter, psiStandardIDParameter, isOptionalParameter, bayIDParameter, iDParameter);
        }
    
        public virtual ObjectResult<sp_msRelayFunctions_Result> sp_msRelayFunctions(string action, string function)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var functionParameter = function != null ?
                new ObjectParameter("Function", function) :
                new ObjectParameter("Function", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msRelayFunctions_Result>("sp_msRelayFunctions", actionParameter, functionParameter);
        }
    
        public virtual ObjectResult<sp_msRequiredQuantities_Result> sp_msRequiredQuantities(string action, Nullable<double> quantity, Nullable<double> transmissionQuantity, Nullable<int> consumableID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(double));
    
            var transmissionQuantityParameter = transmissionQuantity.HasValue ?
                new ObjectParameter("TransmissionQuantity", transmissionQuantity) :
                new ObjectParameter("TransmissionQuantity", typeof(double));
    
            var consumableIDParameter = consumableID.HasValue ?
                new ObjectParameter("ConsumableID", consumableID) :
                new ObjectParameter("ConsumableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_msRequiredQuantities_Result>("sp_msRequiredQuantities", actionParameter, quantityParameter, transmissionQuantityParameter, consumableIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_Settings_Result> sp_Settings(string action)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Settings_Result>("sp_Settings", actionParameter);
        }
    
        public virtual ObjectResult<sp_SubstationStructures_Result> sp_SubstationStructures(string action, string objects, Nullable<int> parentID, string objectType, string fullPath, Nullable<int> iD)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var objectsParameter = objects != null ?
                new ObjectParameter("Objects", objects) :
                new ObjectParameter("Objects", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var fullPathParameter = fullPath != null ?
                new ObjectParameter("FullPath", fullPath) :
                new ObjectParameter("FullPath", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SubstationStructures_Result>("sp_SubstationStructures", actionParameter, objectsParameter, parentIDParameter, objectTypeParameter, fullPathParameter, iDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
